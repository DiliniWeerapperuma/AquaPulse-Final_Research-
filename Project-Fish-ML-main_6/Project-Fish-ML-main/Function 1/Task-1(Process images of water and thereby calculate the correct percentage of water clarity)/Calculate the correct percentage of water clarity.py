# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ux32PK39Td6PacrRJEyH6zWOjgyIZSnn
"""

from google.colab import drive
drive.mount('/content/drive')

ROOT_DIR = '/content/drive/MyDrive/Water_Quality_Dataset'

import locale
locale.getpreferredencoding = lambda: "UTF-8"

"""# **Install Ultralytics fr Yolov8**"""

# Pip install (recommended)
!pip install ultralytics

"""# **Train Model**"""

import os

from ultralytics import YOLO
# Load a model
model = YOLO('yolov8n-cls.pt')  #build a new model from scratch
# Use the model
results = model.train(data=ROOT_DIR, epochs=20, imgsz=64) #train the model

"""# Model Validate"""

import os
import pandas as pd
import matplotlib.pyplot as plt


results_path = '/content/runs/classify/train/results.csv' #path for the results.csv our custom model

results = pd.read_csv(results_path)

plt.figure()
plt.plot(results['                  epoch'], results['             train/loss'], label='train loss')
plt.plot(results['                  epoch'], results['               val/loss'], label='val loss', c='red')
plt.grid()
plt.title('Loss vs epochs')
plt.ylabel('loss')
plt.xlabel('epochs')
plt.legend()


plt.figure()
plt.plot(results['                  epoch'], results['  metrics/accuracy_top1'] * 100)
plt.grid()
plt.title('Validation accuracy vs epochs')
plt.ylabel('accuracy (%)')
plt.xlabel('epochs')

plt.show()

"""# **Predictions**"""

from ultralytics import YOLO
import numpy as np

model = YOLO('/content/drive/MyDrive/last (2).pt')  # load a custom model

results = model('/content/drive/MyDrive/Test Dataset/Dirty/IMG_20231203_155141.jpg')  # predict on an image

names_dict = results[0].names

probs = results[0].probs.data.tolist()

print("Class Names:", names_dict)
print("Probabilities:", probs)

# Find the index with the highest probability
max_prob_index = np.argmax(probs)
max_prob = probs[max_prob_index]

# Convert the result into percentage with 5 decimal points
max_prob_percentage = format(max_prob * 100, '.5f')

print("Predicted Class:", names_dict[max_prob_index])
print("Predicted Class Probability (%):", max_prob_percentage)



